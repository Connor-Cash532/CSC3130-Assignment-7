7.
First I am going to analyze the time and space complexity of the DiOrUndiGraph class and specifically the isDirected method.
Let n = # of vertices in the graph
Time Complexity: The algorithm includes constant operations at the start then a nested loop that iterates through the entirety of the adjacency matrix. The inside of the loops only doing constant time operations. Since the adjacency matrix has n rows and n columns, looping through it is O(n^2), so the time complexity of the algorithm is O(n^2)

Space Complexity: All variables are assigned memory outside of the loop, and no data structure that changes with input size in initialized, so the space complexity is O(1), so the space complexity of the algorithm is O(n^2)

Next, I am going to analyze the time and space complexity of the EveryPath class, specifically the non-main methods because the main method just includes test cases.
Let V=# of vertices, adjM.length
Let E=# of edges
Time Complexity: The initialization of the unweighted array is a constant time operations. The makeUnweighted method loops through the entirety of adjacency matrix which means that the for each row every column in that row is visited. Since the are V rows, and V columns then the time complexity of the loop O(V^2). The other operations in the loop are constant time operations, so the time complexity of the method is O(V^2). Then the path length 7 method has two loops that would upper bound the time complexity of the method. The first loop creates a list of every single path from the starting vertex. Additionally, an array list and queue being used to hold these paths leads to the time complexity of the insertion being based on the number of paths possible. This leads to the first loop having time complexity O((V+E)*(2^V+2^V+V)) = O(4^V). Then the next loop runs through every single path in the paths array list which has at most all possible paths in the graph which is 2^V and adds it to an array list that has every path of length 7 that starts at U and ends at W. Then this list is looped through and in the worst case the number of paths from U to W of length 7 would be all paths in the paths in the paths array list giving O(2^V). From there the fastest growing terms are O(4^V + 2^V + 2^V)=O(4^V), so the time complexity of the method is O(4^V)

Space Complexity: The initialization of the unweighted is a O(V^2), since there are V arrays being created which all have length V by the 2D array. Then the loop has space complexity O(V) since j is being created each time the outer loop runs and the outer loop runs V times, so the space complexity of the method is O(V^2). The path7 method includes multiple lists but as shown above the biggest list will be the ones that can have all possible paths in the them which have size 2^V, so the space complexity would be O(2^V).

Now, I am going to analyze the python script which creates an image of the graph given by the input.
Let n = input_str.length
Let V = # of vertices
Let E = # of edges
Time complexity: Both the wrap_left and wrap_right method have constant time operations only giving them both, O(1) time complexity. Then the create list method takes the input string and creates a list of tuples by formatting input. The call to strip on the input string loops over the entire string which is an O(n) operation. The all_nodes_pair assignment takes the stripped input string and splits up into a list, which loops over the entire stripped string. This is a O(n-2)=O(n) time complexity. The next non-constant time operation loops over the entire list of node pairs, since list of node pairs is equal to number of vertices this loop runs V times total. Inside the loop, each individual pair is formatted the appending to the list as a tuple. Since the pairs are both stripped and split these two operations run n time throughout the entire loop the formatting is occurs a total of 2n times. Additionally each vertex and number is appended to a list as a tuple which has to resize if the list becomes full, the list starts from size 1 to 2 to 3 all the way to V, so the time complexity of the method would be O(V^2+n) based on the gauss' trick. The string_to_dict creates the list using the create_list method then has time complexity V^2, so the total time complexity of the method is O(V^2+n). The create graph method creates both a list and dictionary based on the string_to_dict and create_list methods. Then the method creates a graph and add each vertex to the graph, so V insertions into the graph. Next there is a loop which runs V times since each key is a vertex in the dictionary. Inside the loop there are 3 constant operations and two insertions of edges into the graph. Since each vertex will have at most two edges the insertion is upper bounded by O(2V)=O(V). Then the total time complexity of the method and the script in total would be O(V^2+n+V^2+V)=O(V^2)

Space complexity: The data that is being initialized that changes with input size is the list, dictionary, vertex set of the graph, and edge set of the graph. The leads to the space complexity of O(V+V+V+2V)=O(V).